        -:    0:Source:Guesser.cpp
        -:    0:Graph:Guesser.gcno
        -:    0:Data:Guesser.gcda
        -:    0:Runs:1
        -:    1:#include "Guesser.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  Returns an whole number representing the distance between the guess,
        -:    8:  provided as an argument, and the secret. The distance represents the number
        -:    9:  of characters that would have to be changed at the same location to match
        -:   10:  the other string. When the two strings are identical, the distance is 0,
        -:   11:  but for each letter different, the distance increases by 1. When the
        -:   12:  strings are different lengths, each of the extra characters in the longer
        -:   13:  string also counts as an increase in 1 to the distance, up to the length of
        -:   14:  the secret; in other words, if m_secret has a 10 characters and the guess
        -:   15:  has 100, the distance is 10.
        -:   16:*/
function _ZN7Guesser8distanceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 64 returned 100% blocks executed 100%
       64:   17:unsigned int Guesser::distance(string guess)
        -:   18:{
        -:   19:  //base case
       64:   20:  int distance = 0;
       64:   21:  if (guess == m_secret)
call    0 returned 64
branch  1 taken 18 (fallthrough)
branch  2 taken 46
        -:   22:  {
       18:   23:    return distance;
        -:   24:  }
        -:   25:
        -:   26:  //check for differences in length to ensure words that start the same but have different lengths are not counted as a success
       46:   27:  if (guess > m_secret)
call    0 returned 46
branch  1 taken 10 (fallthrough)
branch  2 taken 36
        -:   28:  {
       10:   29:    distance += guess.length() - m_secret.length();
call    0 returned 10
call    1 returned 10
        -:   30:  }
       46:   31:  if (m_secret > guess)
call    0 returned 46
branch  1 taken 36 (fallthrough)
branch  2 taken 10
        -:   32:  {
       36:   33:    distance += m_secret.length() - guess.length();
call    0 returned 36
call    1 returned 36
        -:   34:  }
        -:   35:
        -:   36:  //check each individual character based on secret's length
      330:   37:  for (int i = 0; i < m_secret.length(); ++i)
call    0 returned 330
branch  1 taken 284
branch  2 taken 46 (fallthrough)
        -:   38:  {
      284:   39:    if (m_secret[i] != guess[i])
call    0 returned 284
call    1 returned 284
branch  2 taken 92 (fallthrough)
branch  3 taken 192
        -:   40:    {
       92:   41:      distance++;
        -:   42:    }
        -:   43:  }
        -:   44:
        -:   45:  //reduce distance if it exceed secret's length
       46:   46:  if(distance > m_secret.length())
call    0 returned 46
branch  1 taken 2 (fallthrough)
branch  2 taken 44
        -:   47:  {
        2:   48:    distance = m_secret.length();
call    0 returned 2
        -:   49:  }
        -:   50:
       46:   51:  return distance;
        -:   52:}
        -:   53:
        -:   54:/*
        -:   55:  Constructor requires that the secret phrase is provided its value as
        -:   56:  an argument. This secret will not change for the lifespan of an instance
        -:   57:  of any Guesser object and must have a length of 32 characters or less,
        -:   58:  otherwise, it will be truncated at that length.
        -:   59:*/
function _ZN7GuesserC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 22 returned 100% blocks executed 88%
       22:   60:Guesser::Guesser(string secret)
call    0 returned 22
        -:   61:{
       22:   62:  if (secret.length() > 32) 
call    0 returned 22
branch  1 taken 2 (fallthrough)
branch  2 taken 20
        -:   63:  {
        2:   64:    secret.resize(32);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   65:  }
       22:   66:  m_secret = secret;
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   67:  m_locked = false;
       22:   68:  m_remaining = 3;
       22:   69:}
call    0 never executed
        -:   70:
        -:   71:/*
        -:   72:  Determines and returns whether the provided guess matches the secret
        -:   73:  phrase. However, the function also returns false if the secret is locked,
        -:   74:  which happens if either (or both):
        -:   75:    (A) there are no remaining guesses allowed
        -:   76:    (B) the function detects brute force, as indicated by a guess that has a
        -:   77:        distance greater than 2 from the secret
        -:   78:  See the remaining() and distance() functions for specifications regarding
        -:   79:  determining how many guesses are remaining and the distance between a guess
        -:   80:  and the secret.
        -:   81:*/
function _ZN7Guesser5matchENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 36 returned 100% blocks executed 77%
       36:   82:bool Guesser::match(string guess)
        -:   83:{
       36:   84:  if (distance(guess) == 0 && !m_locked)
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 36
branch  4 taken 36 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 12 (fallthrough)
branch  7 taken 24
branch  8 taken 6 (fallthrough)
branch  9 taken 6
branch 10 taken 36 (fallthrough)
branch 11 taken 0
call   12 returned 36
branch 13 taken 6 (fallthrough)
branch 14 taken 30
branch 15 never executed (fallthrough)
branch 16 never executed
call   17 never executed
call   18 never executed
        -:   85:  {
        6:   86:    m_remaining = 3;
        6:   87:    return true;
        -:   88:  }
        -:   89:  else
        -:   90:  {
       30:   91:    m_remaining--;
       30:   92:    if (m_remaining <= 0 || distance(guess) > 2) {
branch  0 taken 28 (fallthrough)
branch  1 taken 2
call    2 returned 28
branch  3 taken 28 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 28
branch  6 taken 28 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 10 (fallthrough)
branch  9 taken 18
branch 10 taken 28 (fallthrough)
branch 11 taken 2
call   12 returned 28
branch 13 taken 12 (fallthrough)
branch 14 taken 18
branch 15 never executed (fallthrough)
branch 16 never executed
call   17 never executed
       12:   93:      m_locked = true;
       12:   94:      m_remaining = 0;
        -:   95:    }
        -:   96:  }
       30:   97:  return false;
        -:   98:}
        -:   99:
        -:  100:/*
        -:  101:  Returns the number of guesses remaining. A Guesser object allows up to
        -:  102:  three (3) consecutive guesses without a match. If three guesses are made
        -:  103:  without any being a true match, the secret is locked. However, whenever
        -:  104:  an unlocked secret is guessed with a true match, the guesses remaining
        -:  105:  reset to three (3).
        -:  106:*/
function _ZN7Guesser9remainingEv called 4 returned 100% blocks executed 100%
        4:  107:unsigned int Guesser::remaining()
        -:  108:{
        4:  109:  return m_remaining;
        -:  110:}
